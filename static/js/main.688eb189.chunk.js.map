{"version":3,"sources":["components/Header.tsx","components/Playground.tsx","hooks/useClny.ts","components/About.tsx","components/Page404.tsx","hooks/useRoutes.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","switchRoute","react_default","a","createElement","href","onClick","event","preventDefault","Playground","Error","_useState","useState","_useState2","Object","slicedToArray","text","setText","modes","_useState3","_useState4","mode","setMode","_useState5","_useState6","showOutput","setShowOutput","_useClny","result","setResult","output","setOutput","errors","setErrors","setResults","_ref","asyncToGenerator","regenerator_default","mark","_callee","content","_ref2","_ref3","_result","_output","str","wrap","_context","prev","next","clny","sent","obj","JSON","stringify","t0","undefined","stop","_x","_x2","apply","this","arguments","useClny","_useClny2","runClny","run","useEffect","textareaElement","useRef","handler","document","activeElement","current","which","ctrlKey","window","addEventListener","removeEventListener","showResultsResult","showResultsOutput","length","showResultsErrors","className","ref","cols","rows","value","onChange","target","map","m","key","type","id","name","checked","htmlFor","Fragment","error","lineNumber","errorType","message","toString","replace","line","About","Page404","pathname","location","path","base","route","useRoutes","routes","routesObject","isHome","is404","isPage","defaultRoute","find","setRoute","onpopstate","history","pushState","App","slice","_useRoutes","_useRoutes2","showPlayground","showAbout","show404","components_Header","components_Playground","components_About","components_Page404","Boolean","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAuBeA,SAfA,SAACC,GAAkB,IACxBC,EAAgBD,EAAhBC,YACR,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,IAAIC,QAAU,SAAAC,GAAWA,EAAMC,iBAAkBP,EAAY,OAArE,eACJC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,SAASC,QAAU,SAAAC,GAAWA,EAAMC,iBAAkBP,EAAY,YAA1E,iGC2ECQ,eCtFSC,cDDL,WAEjB,IAFuBC,EAGCC,mBADJ,qDAFGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGhBK,EAHgBH,EAAA,GAGVI,EAHUJ,EAAA,GAKjBK,EAAQ,CAAC,OAAQ,OAAQ,SALRC,EAMCP,mBAASM,EAAM,IANhBE,EAAAN,OAAAC,EAAA,EAAAD,CAAAK,EAAA,GAMhBE,EANgBD,EAAA,GAMVE,EANUF,EAAA,GAAAG,EAQaX,oBAAS,GARtBY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAQhBE,EARgBD,EAAA,GAQJE,EARIF,EAAA,GAAAG,ECWV,WAAsC,IAAAhB,EAEvBC,mBAAS,IAFcC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAE5CiB,EAF4Cf,EAAA,GAEpCgB,EAFoChB,EAAA,GAAAM,EAGvBP,mBAAiB,IAHMQ,EAAAN,OAAAC,EAAA,EAAAD,CAAAK,EAAA,GAG5CW,EAH4CV,EAAA,GAGpCW,EAHoCX,EAAA,GAAAG,EAIvBX,mBAAiB,IAJMY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAI5CS,EAJ4CR,EAAA,GAIpCS,EAJoCT,EAAA,GAM7CU,EAAa,SAACN,EAAiBE,EAAiBE,GACpDH,EAAUD,GAAU,IACpBG,EAAUD,GAAU,IACpBG,EAAUD,GAAU,KAatB,MAAO,CAVE,eAAAG,EAAArB,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAAlC,EAAAmC,KAAG,SAAAC,EAAOC,EAAiBnB,GAAxB,IAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAlC,EAAA2C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEuBC,IAAKV,EAASnB,GAAM,GAF3C,OAAAoB,EAAAM,EAAAI,KAAAT,EAAA5B,OAAAC,EAAA,EAAAD,CAAA2B,EAAA,GAEDb,EAFCc,EAAA,GAEOZ,EAFPY,EAAA,GAGFG,EAlB8B,kBAkBfjB,GAjBTwB,EAiB4BxB,EAjBZyB,KAAKC,UAAUF,EAAK,KAAM,IAiBJxB,EAClDM,EAAWW,EAAKf,GAJRiB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAMRb,OAAWsB,OAAWA,EAAW,CAAAT,EAAAQ,KANzB,yBAAAR,EAAAU,OAdG,IAACL,GAcJb,EAAA,kBAAH,gBAAAmB,EAAAC,GAAA,OAAAxB,EAAAyB,MAAAC,KAAAC,YAAA,GAUIlC,EAAQE,EAAQE,GDvBa+B,GAVnBC,EAAAlD,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAUhBsC,EAVgBD,EAAA,GAUPpC,EAVOoC,EAAA,GAUClC,EAVDkC,EAAA,GAUShC,EAVTgC,EAAA,GAWjBE,EAAM,kBAAMD,EAAQjD,EAAMK,IAChC8C,oBAAU,WAAQD,KAAS,IAE3B,IAAME,EAAkBC,iBAAO,MAC/BF,oBAAU,WACR,IAAMG,EAAU,SAAC/D,GACXgE,SAASC,gBAAkBJ,EAAgBK,SACE,KACrClE,EAAMmE,QAA4B,IAAlBnE,EAAMoE,SAChCT,KAIJ,OADAU,OAAOC,iBAAiB,WAAYP,GAAS,GACtC,kBAAMM,OAAOE,oBAAoB,WAAYR,KACnD,CAACtD,EAAMK,IAEV,IAAM0D,EAA+B,KAAXnD,EACpBoD,EAAoBvD,GAAcK,EAAOmD,OAAS,EAClDC,EAAoBlD,EAAOiD,OAAS,EAE1C,OACE/E,EAAAC,EAAAC,cAAA,OAAK+E,UAAU,cACbjF,EAAAC,EAAAC,cAAA,YAAUgF,IAAMhB,EAAkBiB,KAAO,IAAMC,KAAO,GAAKC,MAAQvE,EAAOwE,SAAW,SAAAjF,GAAK,OAAIU,EAAQV,EAAMkF,OAAOF,UACnHrF,EAAAC,EAAAC,cAAA,OAAK+E,UAAU,gBACbjF,EAAAC,EAAAC,cAAA,OAAK+E,UAAU,cACbjF,EAAAC,EAAAC,cAAA,OAAK+E,UAAU,qBACbjF,EAAAC,EAAAC,cAAA,OAAK+E,UAAU,cACXjE,EAAMwE,IAAI,SAAAC,GAAC,OACTzF,EAAAC,EAAAC,cAAA,OAAKwF,IAAMD,GACTzF,EAAAC,EAAAC,cAAA,SAAOyF,KAAK,QAAQC,GAAKH,EAAII,KAAK,OAAOR,MAAQI,EAAIH,SAAW,SAAAjF,GAAK,OAAIe,EAAQf,EAAMkF,OAAOF,QAASS,QAAUL,IAAMtE,IACvHnB,EAAAC,EAAAC,cAAA,SAAO6F,QAAUN,GAAMA,OAK/BzF,EAAAC,EAAAC,cAAA,OAAK+E,UAAU,eACbjF,EAAAC,EAAAC,cAAA,SAAOyF,KAAK,WAAWC,GAAG,cAAcE,QAAUvE,EAAa+D,SAAW,SAAAjF,GAAK,OAAImB,EAAcnB,EAAMkF,OAAOO,YAC9G9F,EAAAC,EAAAC,cAAA,SAAO6F,QAAQ,eAAf,iBAGJ/F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQE,QAAU,SAAAC,GAAK,OAAI2D,MAA3B,UAGJhE,EAAAC,EAAAC,cAAA,OAAK+E,UAAU,UACXD,GACAhF,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+F,SAAA,KACEhG,EAAAC,EAAAC,cAAA,qBACE4B,EAAO0D,IAAI,SAAAS,GACT,IAAMC,EAAaD,EAAMC,YAAc,UACjCC,EAAYF,EAAME,WAAa,QAC/BC,EAAUH,EAAMI,WAAWC,QAAQ,SAAUH,GAC7CrF,EAAO,SAAWoF,EAAa,KAAOE,EAC5C,OAAQpG,EAAAC,EAAAC,cAAA,KAAG+E,UAAU,QAAQS,IAAMU,GAAYtF,MAKrDgE,GACA9E,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+F,SAAA,KACEhG,EAAAC,EAAAC,cAAA,qBACE0B,EAAO4D,IAAI,SAAAe,GAAI,OAAIvG,EAAAC,EAAAC,cAAA,KAAG+E,UAAU,SAASS,IAAMa,GAASA,MAG5D1B,GACA7E,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+F,SAAA,KACEhG,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,YAAQwB,SEjEP8E,UAdD,WACZ,OACExG,EAAAC,EAAAC,cAAA,OAAK+E,UAAU,SACbjF,EAAAC,EAAAC,cAAA,OAAK+E,UAAU,gBACbjF,EAAAC,EAAAC,cAAA,+FAAsFF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,+CAAR,cACtFH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,+CAAR,wCACJH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,oDAAR,kDCACsG,EARC,WACd,OACEzG,EAAAC,EAAAC,cAAA,OAAK+E,UAAU,WACbjF,EAAAC,EAAAC,cAAA,kBCUAwG,EAAWrC,SAASsC,SAASD,SAE7BE,EAAO,SAACC,EAAYC,GAAb,OAA8BD,EAAOC,GA2BnCC,EAzBG,SAACC,GAAkE,IAAlDH,EAAkDjD,UAAAmB,OAAA,QAAAzB,IAAAM,UAAA,GAAAA,UAAA,GAArC,GAExCqD,EAA6B,CACjCH,MAAQ,kBAAMA,GACdI,OAAQ,iBAAgB,MAAVJ,GACdK,MAAQ,uBAAgB7D,IAAVwD,GACdM,OAAQ,SAACR,GAAD,OAAiBE,IAAUF,IAG/BS,EAAeL,EAAOM,KAAK,SAAAR,GAAK,OAAIF,EAAKC,EAAMC,KAAWJ,IATmBjG,EAUzDC,mBAAwB2G,GAViC1G,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAU5EqG,EAV4EnG,EAAA,GAUrE4G,EAVqE5G,EAAA,GAsBnF,OANAsD,oBAAU,WACRS,OAAO8C,WAAa,WAClBD,EAASb,KAEV,IAEI,CAACO,EAXY,SAACH,GACnBpC,OAAO+C,QAAQC,UAAU,KAAMZ,EAAOF,EAAKC,EAAMC,IACjDS,EAAST,MCxBPE,UAAS,CAAC,IAAK,WAuBNW,EArBH,WAEV,IAAMd,EAAmD,kBAA5CxC,SAASsC,SAASD,SAASkB,MAAM,EAAG,IAA0B,gBAAkB,GAF7EC,EAIad,EAAUC,EAAQH,GAJ/BiB,EAAAlH,OAAAC,EAAA,EAAAD,CAAAiH,EAAA,GAITf,EAJSgB,EAAA,GAIF/H,EAJE+H,EAAA,GAKVC,EAAiBjB,EAAMI,SACvBc,EAAYlB,EAAMM,OAAO,UACzBa,EAAUnB,EAAMK,QAEtB,OACEnH,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+F,SAAA,KACEhG,EAAAC,EAAAC,cAACgI,EAAD,CAAQnI,YAAcA,IACtBC,EAAAC,EAAAC,cAAA,YACI6H,GAAkB/H,EAAAC,EAAAC,cAACiI,EAAD,MAClBH,GAAahI,EAAAC,EAAAC,cAACkI,EAAD,MACbH,GAAWjI,EAAAC,EAAAC,cAACmI,EAAD,SCbDC,QACW,cAA7B5D,OAAOiC,SAAS4B,UAEe,UAA7B7D,OAAOiC,SAAS4B,UAEhB7D,OAAOiC,SAAS4B,SAASC,MACvB,2DCZNC,IAASC,OAAO1I,EAAAC,EAAAC,cAACyI,EAAD,MAAStE,SAASuE,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.688eb189.chunk.js","sourcesContent":["import React from 'react'\nimport './css/Header.sass'\nimport { SwitchRoute } from \"../hooks/useRoutes\"\n\ntype Props = {\n  switchRoute: SwitchRoute\n}\n\nconst Header = (props: Props ) => {\n  const { switchRoute } = props\n  return (\n    <header>\n      <h1>clny</h1>\n      <nav>\n        <ul>\n          <li><a href=\"/\" onClick={ event => { event.preventDefault(); switchRoute(\"/\") } }>playground</a></li>\n          <li><a href=\"/about\" onClick={ event => { event.preventDefault(); switchRoute(\"/about\") } }>about</a></li>\n        </ul>\n      </nav>\n    </header>\n  )\n}\n\nexport default Header\n","import React, { useState, useEffect, useRef } from 'react'\nimport useClny from '../hooks/useClny'\nimport './css/Playground.sass'\n\nconst Playground = () => {\n\n  const defaultText = \"# comment\\n\\nprint \\\"Hello World\\\"\\n\\n1 + 2 * 3\\n\\n\"\n  const [text, setText] = useState(defaultText)\n\n  const modes = [\"code\", \"json\", \"parse\"]\n  const [mode, setMode] = useState(modes[0])\n\n  const [showOutput, setShowOutput] = useState(true)\n\n  const [runClny, result, output, errors] = useClny()\n  const run = () => runClny(text, mode)\n  useEffect(() => { run() }, [])\n\n  const textareaElement = useRef(null)\n  useEffect(() => {\n    const handler = (event: KeyboardEvent) => {\n      if (document.activeElement !== textareaElement.current) return\n      const isEnter = (keyCode: number) => keyCode === 13\n      if (isEnter(event.which) && event.ctrlKey === true) {\n        run()\n      }\n    }\n    window.addEventListener(\"keypress\", handler, false)\n    return () => window.removeEventListener(\"keypress\", handler)\n  }, [text, mode])\n\n  const showResultsResult = result !== \"\"\n  const showResultsOutput = showOutput && output.length > 0\n  const showResultsErrors = errors.length > 0\n\n  return (\n    <div className=\"playground\">\n      <textarea ref={ textareaElement } cols={ 128 } rows={ 16 } value={ text } onChange={ event => setText(event.target.value) } />\n      <div className=\"wrap-content\">\n        <div className=\"wrap-input\">\n          <div className=\"wrap-radio-select\">\n            <div className=\"wrap-radio\">\n              { modes.map(m =>\n                  <div key={ m }>\n                    <input type=\"radio\" id={ m } name=\"mode\" value={ m } onChange={ event => setMode(event.target.value) } checked={ m === mode }/>\n                    <label htmlFor={ m }>{ m }</label>\n                  </div>\n                )\n              }\n            </div>\n            <div className=\"wrap-select\">\n              <input type=\"checkbox\" id=\"show-output\" checked={ showOutput } onChange={ event => setShowOutput(event.target.checked) } />\n              <label htmlFor=\"show-output\">show output</label>\n            </div>\n          </div>\n          <div>\n            <button onClick={ event => run() }>play</button>\n          </div>\n        </div>\n        <div className=\"result\">\n          { showResultsErrors &&\n            <>\n              <h3>errors:</h3>\n              { errors.map(error => {\n                  const lineNumber = error.lineNumber || \"UNKNOWN\"\n                  const errorType = error.errorType || \"Error\"\n                  const message = error.toString().replace(/^Error/, errorType)\n                  const text = \"line: \" + lineNumber + \", \" + message\n                  return (<p className=\"error\" key={ message }>{ text }</p>)\n                }\n              )}\n            </>\n          }\n          { showResultsOutput &&\n            <>\n              <h3>output:</h3>\n              { output.map(line => <p className=\"output\" key={ line }>{ line }</p>) }\n            </>\n          }\n          { showResultsResult &&\n            <>\n              <h3>result:</h3>\n              <code>{ result }</code>\n            </>\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Playground\n","import { useState } from 'react'\nimport clny from 'clny'\n\ntype Result = string\ntype Output = string[]\nclass ClnyError extends Error {\n  lineNumber: number | undefined\n  errorType: string | undefined\n}\ntype Errors = ClnyError[]\ntype Run = (content: string, mode: string) => Promise<void>\n\nconst isObject = (v: any) => typeof v === \"object\"\nconst toString = (obj: Object) => JSON.stringify(obj, null, 2)\n\nexport default () : [Run, Result, Output, Errors] => {\n\n  const [result, setResult] = useState(\"\")\n  const [output, setOutput] = useState<Output>([])\n  const [errors, setErrors] = useState<Errors>([])\n\n  const setResults = (result?: Result, output?: Output, errors?: Errors) => {\n    setResult(result || \"\")\n    setOutput(output || [])\n    setErrors(errors || [])\n  }\n\n  const run = async (content: string, mode: string) => {\n    try {\n      const [result, output] = await clny(content, mode, false)\n      const str = isObject(result) ? toString(result) : result\n      setResults(str, output)\n    } catch (error) {\n      setResults(undefined, undefined, [error])\n    }\n  }\n\n  return [run, result, output, errors]\n}\n","import React from 'react'\nimport './css/About.sass'\n\nconst About = () => {\n  return (\n    <div className=\"about\">\n      <div className=\"wrap-content\">\n        <p>Programming language implementation in JavaScript, using parser combinator library <a href=\"https://github.com/francisrstokes/arcsecond\">Arcsecond</a></p>\n        <ul>\n          <li><a href=\"https://github.com/gilleswittenberg/clny-js\">github.com/gilleswittenberg/clny-js</a></li>\n          <li><a href=\"https://github.com/gilleswittenberg/clnylang.com\">github.com/gilleswittenberg/clnylang.com</a></li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default About\n","import React from 'react'\n\nconst Page404 = () => {\n  return (\n    <div className=\"page404\">\n      <p>404</p>\n    </div>\n  )\n}\n\nexport default Page404\n","import { useState, useEffect } from 'react'\n\ntype Route = string\ntype OptionalRoute = Route | undefined\ntype Routes = Route[]\ntype Base = string\n\ntype RoutesObject = {\n  route: () => OptionalRoute,\n  isHome: () => boolean,\n  is404: () => boolean,\n  isPage: (arg0: Route) => boolean\n}\nexport type SwitchRoute = (arg0: Route) => void\n\nconst pathname = document.location.pathname\n\nconst path = (base: Base, route: Route) => base + route\n\nconst useRoutes = (routes: Routes, base: Base = \"\") : [RoutesObject, SwitchRoute] => {\n\n  const routesObject: RoutesObject = {\n    route:  () => route,\n    isHome: () => route === \"/\",\n    is404:  () => route === undefined,\n    isPage: (path: Route) => route === path\n  }\n\n  const defaultRoute = routes.find(route => path(base, route) === pathname)\n  const [route, setRoute] = useState<OptionalRoute>(defaultRoute)\n  const switchRoute = (route: Route) => {\n    window.history.pushState(null, route, path(base, route))\n    setRoute(route)\n  }\n\n  useEffect(() => {\n    window.onpopstate = () => {\n      setRoute(pathname)\n    }\n  }, [])\n\n  return [routesObject, switchRoute]\n}\n\nexport default useRoutes\n","import React from 'react'\nimport Header from \"./Header\"\nimport Playground from \"./Playground\"\nimport About from \"./About\"\nimport Page404 from \"./Page404\"\nimport useRoutes from \"../hooks/useRoutes\"\nimport './css/App.sass'\n\nconst routes = [\"/\", \"/about\"]\n\nconst App = () => {\n\n  const base = document.location.pathname.slice(0, 13) === \"/clnylang.com\" ? \"/clnylang.com\" : \"\"\n\n  const [route, switchRoute] = useRoutes(routes, base)\n  const showPlayground = route.isHome()\n  const showAbout = route.isPage(\"/about\")\n  const show404 = route.is404()\n\n  return (\n    <>\n      <Header switchRoute={ switchRoute }/>\n      <main>\n        { showPlayground && <Playground/> }\n        { showAbout && <About/> }\n        { show404 && <Page404/> }\n      </main>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}