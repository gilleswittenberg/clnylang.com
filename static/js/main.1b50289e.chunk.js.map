{"version":3,"sources":["hooks/useClny.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["createRun","setResult","setOutput","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","content","mode","_ref2","_ref3","result","output","str","wrap","_context","prev","next","clny","sent","slicedToArray","obj","JSON","stringify","t0","console","error","stop","_x","_x2","apply","this","arguments","App","_useState","useState","_useState2","text","setText","modes","_useState3","_useState4","setMode","_useState5","_useState6","showOutput","setShowOutput","_useClny","useClny","_useClny2","runClny","run","useEffect","showResult","showResultAndOutput","react_default","createElement","Fragment","cols","rows","value","onChange","event","target","className","map","m","key","type","id","name","checked","htmlFor","onClick","line","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b50289e.chunk.js","sourcesContent":["import { useState } from 'react'\nimport clny from 'clny'\n\ntype Strings = string[]\ntype Run = (content: string, mode: string) => Promise<void>\n\nconst isObject = (v: any) => typeof v === \"object\"\nconst toString = (obj: any) => JSON.stringify(obj, null, 2)\n\nexport default () : [Run, string, Strings] => {\n\n  const [result, setResult] = useState(\"\")\n  const [output, setOutput] = useState<Strings>([])\n  const run = createRun(setResult, setOutput)\n  return [run, result, output]\n}\n\nconst createRun = (setResult: any, setOutput: any) =>\n  async (content: string, mode: string) => {\n    try {\n      const [result, output] = await clny(content, mode, false)\n      const str = isObject(result) ? toString(result) : result\n      setResult(str)\n      setOutput(output)\n    } catch (err) {\n      console.error(err)\n    }\n  }\n","import React, { useState, useEffect } from 'react'\nimport useClny from './hooks/useClny'\nimport './App.sass'\n\nconst App = () => {\n\n  const defaultText = \"# comment\\n\\nprint \\\"Hello World\\\"\\n\\n1 + 2 * 3\\n\\n\"\n  const [text, setText] = useState(defaultText)\n\n  const modes = [\"code\", \"json\", \"parse\"]\n  const [mode, setMode] = useState(modes[0])\n\n  const [showOutput, setShowOutput] = useState(true)\n\n  const [runClny, result, output] = useClny()\n  const run = () => runClny(text, mode)\n  useEffect(() => { run() }, [])\n\n  const showResult = result !== \"\"\n  const showResultAndOutput = showResult || showOutput\n\n  return (\n    <>\n      <header>\n        <h1>clny</h1>\n        <nav>\n          { /*<a href=\"/about\">about</a>*/ }\n        </nav>\n      </header>\n      <main>\n        <textarea cols={ 128 } rows={ 16 } value={ text } onChange={ event => setText(event.target.value) } />\n        <div className=\"wrap-input\">\n          <div className=\"wrap-radio\">\n            { modes.map(m =>\n                <span key={ m }>\n                  <input type=\"radio\" id={ m } name=\"mode\" value={ m } onChange={ event => setMode(event.target.value) } checked={ m === mode }/>\n                  <label htmlFor={ m }>{ m }</label>\n                </span>\n              )\n            }\n          </div>\n          <div className=\"wrap-select\">\n            <input type=\"checkbox\" id=\"show-output\" checked={ showOutput } onChange={ event => setShowOutput(event.target.checked) } />\n            <label htmlFor=\"show-output\">show output</label>\n          </div>\n          <button onClick={ event => run() }>play</button>\n        </div>\n        <div className=\"result\">\n          { showResultAndOutput &&\n            <>\n              <h3>result:</h3>\n              { showOutput &&\n                output.map(line => <p className=\"output\" key={ line }>{ line }</p>)\n              }\n              { showResult &&\n                <code>{ result }</code>\n              }\n            </>\n          }\n        </div>\n      </main>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}